(function(){var e={924:function(){},472:function(){},54:function(e,t,i){var n=i(924);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),i(346).Z("4d8f9dd7",n,!0,{})},269:function(e,t,i){var n=i(472);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),i(346).Z("57521b0c",n,!0,{})},346:function(e,t,i){"use strict";function n(e,t){for(var i=[],n={},a=0;a<t.length;a++){var s=t[a],c=s[0],o={id:e+":"+a,css:s[1],media:s[2],sourceMap:s[3]};n[c]?n[c].parts.push(o):i.push(n[c]={id:c,parts:[o]})}return i}i.d(t,{Z:function(){return u}});var a="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!a)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s={},c=a&&(document.head||document.getElementsByTagName("head")[0]),o=null,r=0,l=!1,d=function(){},g=null,m="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function u(e,t,i,a){l=i,g=a||{};var c=n(e,t);return h(c),function(t){for(var i=[],a=0;a<c.length;a++){var o=s[c[a].id];o.refs--,i.push(o)}t?h(c=n(e,t)):c=[];for(var a=0;a<i.length;a++){var o=i[a];if(0===o.refs){for(var r=0;r<o.parts.length;r++)o.parts[r]();delete s[o.id]}}}}function h(e){for(var t=0;t<e.length;t++){var i=e[t],n=s[i.id];if(n){n.refs++;for(var a=0;a<n.parts.length;a++)n.parts[a](i.parts[a]);for(;a<i.parts.length;a++)n.parts.push(b(i.parts[a]));n.parts.length>i.parts.length&&(n.parts.length=i.parts.length)}else{for(var c=[],a=0;a<i.parts.length;a++)c.push(b(i.parts[a]));s[i.id]={id:i.id,refs:1,parts:c}}}}function _(){var e=document.createElement("style");return e.type="text/css",c.appendChild(e),e}function b(e){var t,i,n=document.querySelector("style["+m+'~="'+e.id+'"]');if(n){if(l)return d;n.parentNode.removeChild(n)}if(p){var a=r++;t=v.bind(null,n=o||(o=_()),a,!1),i=v.bind(null,n,a,!0)}else t=w.bind(null,n=_()),i=function(){n.parentNode.removeChild(n)};return t(e),function(n){n?(n.css!==e.css||n.media!==e.media||n.sourceMap!==e.sourceMap)&&t(e=n):i()}}var f=function(){var e=[];return function(t,i){return e[t]=i,e.filter(Boolean).join("\n")}}();function v(e,t,i,n){var a=i?"":n.css;if(e.styleSheet)e.styleSheet.cssText=f(t,a);else{var s=document.createTextNode(a),c=e.childNodes;c[t]&&e.removeChild(c[t]),c.length?e.insertBefore(s,c[t]):e.appendChild(s)}}function w(e,t){var i=t.css,n=t.media,a=t.sourceMap;if(n&&e.setAttribute("media",n),g.ssrId&&e.setAttribute(m,t.id),a&&(i+="\n/*# sourceURL="+a.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}}},t={};function i(n){var a=t[n];if(void 0!==a)return a.exports;var s=t[n]={id:n,exports:{}};return e[n](s,s.exports,i),s.exports}i.d=function(e,t){for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="bundles/hatslogicpageoptimisation/",window?.__sw__?.assetPath&&(i.p=window.__sw__.assetPath+"/bundles/hatslogicpageoptimisation/"),function(){"use strict";i(54);let{Component:e,Context:t,Utils:n}=Shopware,{Criteria:a}=Shopware.Data;e.register("hatslogic-critical-asset-cms-page-category-mapping-grid",{template:'{% block hatslogic_critical_assets_cms_page_category_mapping %}\n    <sw-container type="row" class="sw-field hatslogic-critical-asset-cms-page-category-mapping-grid">\n        <div class="sw-field__label">\n            <label>{{ $tc(\'hatslogic-critical-assets.mappingGrid.title\') }}</label>\n        </div>\n\n        <div class="sw-field__label">\n            <label>{{ $tc(\'hatslogic-critical-assets.mappingGrid.intro\') }}</label>\n        </div>\n\n        {% block hatslogic_critical_assets_cms_page_category_mapping %}\n            <sw-data-grid\n                :dataSource="rows"\n                :columns="columns"\n                :fullPage="false"\n                :showSettings="false"\n                :showSelection="editable"\n                :showActions="false"\n                :isLoading="isLoading"\n                :allowColumnEdit="false"\n                :compactMode="false"\n                identifier="hatslogic-critical-asset-cms-page-category-mapping-grid"\n                class="hatslogic-critical-asset-cms-page-category-mapping-grid__data-grid"\n                @selection-change="onSelectionChanged"\n                :isRecordEditable="(item) => true">\n\n                {% block hatslogic_critical_assets_cms_page_category_mapping_grid_columns %}\n\n                    {% block hatslogic_critical_assets_cms_page_category_mapping_grid_columns_cms_page %}\n                        <template #column-cmsPageId="{item}">\n\n                            {% block hatslogic_critical_assets_cms_page_category_mapping_grid_columns_cms_page_field %}\n                                <sw-entity-single-select\n                                    entity="cms_page"\n                                    labelProperty="name"\n                                    :value="item.cmsPageId ? item.cmsPageId : \'\'"\n                                    :context="context"\n                                    :criteria="cmsPageCriteria"\n                                    @update:value="(value) => onCmsPageSelected(item, value)">\n                                </sw-entity-single-select>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n\n                    {% block hatslogic_critical_assets_cms_page_category_mapping_grid_columns_category %}\n\n                        <template #column-categoryId="{item}">\n                            {% block hatslogic_critical_assets_cms_page_category_mapping_grid_columns_category_field %}\n\n                                <sw-entity-single-select\n                                    entity="category"\n                                    labelProperty="name"\n                                    :value="item.categoryId ? item.categoryId : \'\'"\n                                    :context="context"\n                                    :criteria="categoryCriteria(item.cmsPageId)"\n                                    @update:value="(value) => onCategorySelected(item, value)">\n                                </sw-entity-single-select>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n\n                    {% block hatslogic_critical_assets_cms_page_category_mapping_bulk_actions %}\n                        <template #bulk>\n                            {% block hatslogic_critical_assets_cms_page_category_mapping_bulk_actions_delete %}\n                                <a class="link link-danger" @click="onDeleteSelectedItems">\n                                    {{ $tc(\'global.default.delete\') }}\n                                </a>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                {% endblock %}\n            </sw-data-grid>\n        {% endblock %}\n\n        {% block hatslogic_critical_assets_cms_page_category_mapping_actions %}\n            <sw-container\n                class="hatslogic-critical-asset-cms-page-category-mapping-grid__actions-container"\n                columns="1fr auto"\n                v-show="editable">\n                {% block hatslogic_critical_assets_cms_page_category_mapping_create_actions %}\n                    <div align="right">\n                        {% block hatslogic_critical_assets_cms_page_category_mapping_add_product %}\n                            <sw-button\n                                class="hatslogic-critical-asset-cms-page-category-mapping-grid__actions-container-add-row-btn"\n                                variant="ghost"\n                                size="small"\n                                @click="onAddNewRow">\n                                {{ $tc(\'hatslogic-critical-assets.mappingGrid.buttonAddRow\') }}\n                            </sw-button>\n                        {% endblock %}\n                    </div>\n                {% endblock %}\n            </sw-container>\n        {% endblock %}\n\n    </sw-container>\n{% endblock %}\n',inject:["acl","repositoryFactory"],data(){return{isLoading:!1,rows:[],selectedItems:{},editable:!0}},props:{value:{type:String,required:!1,default:""}},created(){if(this.value){let e=JSON.parse(this.value);Object.keys(e).forEach(t=>{this.rows.push({id:n.createId(),cmsPageId:t,categoryId:e[t]})})}this.rows.length<=0&&this.onAddNewRow()},watch:{rows:function(e){this.onInlineEditSave()}},computed:{cmsPageRepository(){return this.repositoryFactory.create("cms_page")},cmsPageCriteria(){let e=new a;return e.addAssociation("categories"),e},categoryRepository(){return this.repositoryFactory.create("category")},context(){return t.api},columns(){return[{property:"cmsPageId",dataIndex:"cmsPageId",label:"hatslogic-critical-assets.mappingGrid.cmsPageLabel",allowResize:!0,primary:!1,inlineEdit:!0},{property:"categoryId",dataIndex:"categoryId",label:"hatslogic-critical-assets.mappingGrid.categoryLabel",allowResize:!0,primary:!1,inlineEdit:!0}]}},methods:{categoryCriteria(e){let t=new a;return t.addFilter(a.equals("cmsPageId",e)),t},onDeleteSelectedItems(){Object.values(this.selectedItems).forEach(e=>{this.rows=this.rows.filter(t=>t.id!=e.id)})},onCmsPageSelected(e,t){e.cmsPageId=t,this.onInlineEditSave()},onCategorySelected(e,t){e.categoryId=t,this.onInlineEditSave()},onSelectionChanged(e){this.selectedItems=e},onInlineEditSave(){let e={};this.rows.filter(t=>{t.cmsPageId&&t.categoryId&&(e[t.cmsPageId]=t.categoryId)}),this.$emit("change",JSON.stringify(e))},onAddNewRow(){this.rows.push({id:n.createId(),cmsPageId:null,categoryId:null})}}}),i(269);let{Component:s,Context:c,Utils:o,Service:r,Mixin:l}=Shopware,{Criteria:d}=Shopware.Data;s.register("hatslogic-critical-assets-generation-btn",{template:'<sw-button\n    variant="primary"\n    :is-loading="isLoading"\n    class="critical-css-btn"\n    @click="generateCriticalCSS"\n>\n    {{ buttonLabel }}\n</sw-button>\n',mixins:[l.getByName("notification")],data(){return{buttonLabel:this.$tc("hatslogic-critical-assets.criticalCssGeneration.buttonLabel"),isLoading:!1}},created(){this.syncService=r("syncService"),this.httpClient=this.syncService.httpClient},methods:{generateCriticalCSS(){this.isLoading=!0,this.createNotificationInfo({title:this.$tc("hatslogic-critical-assets.criticalCssGeneration.startedTitle"),message:this.$tc("hatslogic-critical-assets.criticalCssGeneration.startedMessage")}),this.httpClient.get("/_action/hatslogic/generate/critical-css",{headers:this.syncService.getBasicHeaders()}).then(e=>{this.isLoading=!1,!0===e.data.success?this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("hatslogic-critical-assets.criticalCssGeneration.successMessage")}):this.createNotificationError({title:this.$tc("global.default.error"),message:e.data.message})}).catch(e=>{this.isLoading=!1,this.createNotificationError({title:this.$tc("global.default.error"),message:e.response.data.message})})}}});let{Component:g,Context:m,Utils:p,Service:u,Mixin:h}=Shopware,{Criteria:_}=Shopware.Data;g.register("hatslogic-image-convert-into-webp-btn",{template:'<sw-button\n    variant="primary"\n    :is-loading="isLoading"\n    @click="convertImageIntoWebP"\n>\n    {{ buttonLabel }}\n</sw-button>\n',mixins:[h.getByName("notification")],data(){return{buttonLabel:"Convert image into Webp",isLoading:!1}},created(){this.syncService=u("syncService"),this.httpClient=this.syncService.httpClient},methods:{convertImageIntoWebP(){this.isLoading=!0,this.createNotificationInfo({title:"Convert image into Webp",message:"Converting images"}),this.httpClient.get("/_action/hatslogic/convert/imagestowebp",{headers:this.syncService.getBasicHeaders()}).then(e=>{this.isLoading=!1,!0===e.data.success?this.createNotificationSuccess({title:this.$tc("global.default.success"),message:"Successfully converted images"}):this.createNotificationError({title:this.$tc("global.default.error"),message:e.data.message})}).catch(e=>{this.isLoading=!1,this.createNotificationError({title:this.$tc("global.default.error"),message:e.response.data.message})})}}});let{Component:b,Context:f,Utils:v,Service:w,Mixin:y}=Shopware,{Criteria:k}=Shopware.Data;b.register("hatslogic-gtm-script-optimization-btn",{template:'<sw-button\n    variant="primary"\n    :is-loading="isLoading"\n    @click="optimizeGtmScript"\n>\n    {{ buttonLabel }}\n</sw-button>\n',mixins:[y.getByName("notification")],data(){return{buttonLabel:"Optimize Gtm Script",isLoading:!1}},created(){this.syncService=w("syncService"),this.httpClient=this.syncService.httpClient},methods:{optimizeGtmScript(){this.isLoading=!0,this.createNotificationInfo({title:"Optimize Gtm Script",message:"Optimizing Gtm Script"}),this.httpClient.get("/_action/hatslogic/convert/gtm-script",{headers:this.syncService.getBasicHeaders()}).then(e=>{this.isLoading=!1,!0===e.data.success?this.createNotificationSuccess({title:this.$tc("global.default.success"),message:"Successfully converted images"}):this.createNotificationError({title:this.$tc("global.default.error"),message:e.data.message})}).catch(e=>{this.isLoading=!1,this.createNotificationError({title:this.$tc("global.default.error"),message:e.response.data.message})})}}});let{Component:S,Service:C,Mixin:I}=Shopware;S.override("sw-media-quickinfo",{template:'{% block sw_media_quickinfo_quickactions_content %}\n            <ul class="sw-media-sidebar__quickactions-list">\n                \n                {% block sw_media_quickinfo_quickactions_replace %}\n                <li\n                    v-if="!item.private"\n                    v-tooltip="{\n                        message: $tc(\'sw-privileges.tooltip.warning\'),\n                        disabled: acl.can(\'media.editor\'),\n                        showOnDisabledElements: true\n                    }"\n                    class="quickaction--replace"\n                    :class="quickActionClasses(!acl.can(\'media.editor\'))"\n                    role="button"\n                    tabindex="0"\n                    @click="openModalReplace"\n                    @keydown.enter="openModalReplace"\n                >\n                    <sw-icon\n                        small\n                        name="regular-files"\n                        class="sw-media-sidebar__quickactions-icon"\n                    />\n                    {{ $tc(\'sw-media.sidebar.actions.replace\') }}\n                </li>\n                {% endblock %}\n\n                \n                {% block sw_media_quickinfo_quickactions_download %}\n                <li\n                    v-if="item.hasFile"\n                    class="sw-media-sidebar__quickaction quickaction--download"\n                >\n                    <sw-external-link\n                        :href="item.url"\n                        download\n                    >\n\n                        <sw-icon\n                            small\n                            name="regular-cloud-download"\n                            class="sw-media-sidebar__quickactions-icon"\n                        />\n                        {{ $tc(\'sw-media.sidebar.actions.download\') }}\n                    </sw-external-link>\n                </li>\n                {% endblock %}\n                \n                {% block sw_media_quickinfo_quickactions_move %}\n                <li\n                    v-tooltip="{\n                        message: $tc(\'sw-privileges.tooltip.warning\'),\n                        disabled: acl.can(\'media.editor\'),\n                        showOnDisabledElements: true\n                    }"\n                    class="quickaction--move"\n                    :class="quickActionClasses(!acl.can(\'media.editor\'))"\n                    role="button"\n                    tabindex="0"\n                    @click="openModalMove"\n                    @keydown.enter="openModalMove"\n                >\n\n                    <sw-icon\n                        small\n                        name="regular-file-export"\n                        class="sw-media-sidebar__quickactions-icon"\n                    />\n                    {{ $tc(\'sw-media.sidebar.actions.move\') }}\n                </li>\n                {% endblock %}\n\n                \n                {% block sw_media_quickinfo_quickactions_copy_link %}\n                <li\n                    v-if="item.hasFile"\n                    class="sw-media-sidebar__quickaction quickaction--copy-link"\n                    role="button"\n                    tabindex="0"\n                    @click="copyLinkToClipboard"\n                    @keydown.enter="copyLinkToClipboard"\n                >\n\n                    <sw-icon\n                        small\n                        name="regular-link"\n                        class="sw-media-sidebar__quickactions-icon"\n                    />\n                    {{ $tc(\'sw-media.sidebar.actions.copyLink\') }}\n                </li>\n                {% endblock %}\n\n                \n                {% block sw_media_quickinfo_quickactions_delete %}\n                <li\n                    v-if="!item.private"\n                    v-tooltip="{\n                        message: $tc(\'sw-privileges.tooltip.warning\'),\n                        disabled: acl.can(\'media.deleter\'),\n                        showOnDisabledElements: true\n                    }"\n                    class="quickaction--delete"\n                    :class="quickActionClasses(!acl.can(\'media.deleter\'))"\n                    role="button"\n                    tabindex="0"\n                    @click="openModalDelete"\n                    @keydown.enter="openModalDelete"\n                >\n                    <sw-icon\n                        small\n                        name="regular-trash"\n                        class="sw-media-sidebar__quickactions-icon is--danger"\n                    />\n                    {{ $tc(\'sw-media.sidebar.actions.delete\') }}\n                </li>\n                {% endblock %}\n                \n                {% block sw_media_quickinfo_quickactions_convert %}\n                <li\n                    v-if="item.hasFile"\n                    class="sw-media-sidebar__quickaction quickaction--copy-link"\n                    role="button"\n                    tabindex="0"\n                    @click="convertImageIntoWebP"\n                    @keydown.enter="convertImageIntoWebP"\n                >\n                    <sw-icon\n                        small\n                        name="regular-times-xs"\n                        class="sw-media-sidebar__quickactions-icon is--danger"\n                    />\n                    Convert\n                </li>\n                {% endblock %}\n            </ul>\n{% endblock %}',mixins:[I.getByName("notification")],data(){return{buttonLabel:"Convert image into Webp",isLoading:!1}},created(){this.syncService=C("syncService"),this.httpClient=this.syncService.httpClient},methods:{convertImageIntoWebP(){if(!this.item||!this.item.url){this.createNotificationError({title:this.$tc("global.default.error"),message:"No image URL found to convert."});return}console.log(this.item),console.log(this.item.url),this.isLoading=!0,this.createNotificationInfo({title:"Convert image into Webp",message:"Converting images"}),this.httpClient.post("/_action/hatslogic/convert/singleimagestowebp",{url:this.item.url},{headers:this.syncService.getBasicHeaders()}).then(e=>{this.isLoading=!1,!0===e.data.success?this.createNotificationSuccess({title:this.$tc("global.default.success"),message:"Successfully converted the image to WebP format."}):this.createNotificationError({title:this.$tc("global.default.error"),message:e.data.message||"Failed to convert the image."})}).catch(e=>{this.isLoading=!1,this.createNotificationError({title:this.$tc("global.default.error"),message:e.response?.data?.message||"An error occurred while converting the image."}),console.error("Error:",e)})}}})}()})();